File: ./index.html

<!-- index.html -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">
    
    <link rel="stylesheet" href="css/style.css">
    
    <title>The-AI-Dub</title>
</head>
<body>
    <!-- The body should be empty. JS builds the content. -->
</body>

<!-- This line LOADS and RUNS the code from js/main.js -->
<script src="js/main.js" type="module"></script>
</html>

____________________________________

File: ./README.md

# The-Dub_website

____________________________________

File: ./copy.py

import os

# --- Configuration ---
# The directory to scan. '.' means the current directory where the script is located.
ROOT_DIRECTORY = '.'
# The name of the file to save all the text into.
OUTPUT_FILENAME = 'project_snapshot.txt'
# List of directories to completely ignore (very important).
EXCLUDED_DIRS = {'node_modules', '.git', '__pycache__', '.vscode'}
# List of binary file extensions to skip directly for efficiency.
BINARY_EXTENSIONS = {'.png', '.jpg', '.jpeg', '.gif', '.ico', '.woff', '.woff2', '.eot', '.ttf', '.otf'}


def create_project_snapshot():
    """
    Scans a directory recursively, reads the content of all readable files,
    and writes them into a single output file with formatting.
    """
    print(f"Starting to scan '{os.path.abspath(ROOT_DIRECTORY)}'...")
    files_processed = 0
    files_skipped = 0

    try:
        with open(OUTPUT_FILENAME, 'w', encoding='utf-8', errors='ignore') as output_file:
            # os.walk is perfect for recursively going through directories
            for dirpath, dirnames, filenames in os.walk(ROOT_DIRECTORY):
                
                # --- Exclusion Logic ---
                # This prevents os.walk from entering excluded folders.
                dirnames[:] = [d for d in dirnames if d not in EXCLUDED_DIRS]
                
                for filename in filenames:
                    # Skip the output file itself
                    if filename == OUTPUT_FILENAME:
                        continue
                    
                    # Skip common binary file types
                    if any(filename.lower().endswith(ext) for ext in BINARY_EXTENSIONS):
                        files_skipped += 1
                        continue

                    file_path = os.path.join(dirpath, filename)
                    
                    try:
                        with open(file_path, 'r', encoding='utf-8', errors='ignore') as current_file:
                            content = current_file.read()
                            
                            # --- Writing to the output file ---
                            output_file.write(f"File: {file_path}\n\n")
                            output_file.write(f"{content}\n\n")
                            output_file.write("____________________________________\n\n")
                            files_processed += 1
                            
                    except Exception as e:
                        # This handles any other unreadable files gracefully
                        files_skipped += 1
                        print(f"  - Could not read file (skipping): {file_path} | Reason: {e}")
                        
        print(f"\n✅ Success! All readable files have been combined into '{OUTPUT_FILENAME}'")
        print(f"   - Files processed: {files_processed}")
        print(f"   - Files skipped: {files_skipped}")

    except IOError as e:
        print(f"❌ Error: Could not write to the output file '{OUTPUT_FILENAME}'. | Reason: {e}")


# --- Run the script ---
if __name__ == '__main__':
    create_project_snapshot()

____________________________________

File: ./9ca3f72455d220b61ad3f4dc75e6697a.html

9ca3f72455d220b61ad3f4dc75e6697a

____________________________________

File: ./js/main.js

import { createToolbar } from './components/Toolbar.js';

// Import the video player component
import { createVideoPlayer } from './components/VideoPlayer.js';

// Run the functions to build the page
createToolbar();
createVideoPlayer();

____________________________________

File: ./js/components/VideoPlayer.js

// js/components/VideoPlayer.js

// --- 1. THE CONFIGURATION AREA ---
const serverList = [
    { name: "Server 1", url: "https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4" },
    { name: "Server 2", url: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4" },
    { name: "Server 3", url: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4" },
    { name: "Server 4", url: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4" },
    { name: "Server 5", url: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4" }
];
// --- END CONFIGURATION AREA ---

// Helper functions to load CSS and JS
function loadCSS(href) { if (!document.querySelector(`link[href="${href}"]`)) { const link = document.createElement('link'); link.rel = 'stylesheet'; link.href = href; document.head.appendChild(link); } }
function loadJS(src) { return new Promise((resolve, reject) => { const script = document.createElement('script'); script.src = src; script.onload = resolve; script.onerror = reject; document.body.appendChild(script); }); }

// --- The simple function to handle button clicks ---
function setupServerButtons(player) {
    const serverButtons = document.querySelectorAll('.server-btn');
    serverButtons.forEach((button, index) => {
        button.addEventListener('click', () => {
            // Remove 'active' from all buttons
            serverButtons.forEach(btn => btn.classList.remove('active'));
            // Add 'active' to the clicked button
            button.classList.add('active');

            // Get the new source URL
            const newSource = serverList[index].url;
            
            // Tell the player to change its source
            player.source = {
                type: 'video',
                sources: [{ src: newSource, type: 'video/mp4' }],
            };
            console.log(`Switched to: ${newSource}`);
        });
    });
}

export async function createVideoPlayer() {
    // Load all necessary CSS
    loadCSS('https://cdn.plyr.io/3.7.8/plyr.css');
    loadCSS('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css');
    loadCSS('css/components/videoplayer.css');
    loadCSS('css/components/serverselector.css');

    // Dynamically generate the button HTML from the serverList
    const buttonsHTML = serverList.map((server, index) => {
        const isActive = index === 0 ? 'active' : '';
        return `<button class="server-btn ${isActive}">${server.name}</button>`;
    }).join('');

    // Define the HTML for the entire component
    const fullComponentHTML = `
        <main class="content-area">
            <div class="video-container">
                <video id="player" playsinline controls>
                    <source src="${serverList[0].url}" type="video/mp4" />
                </video>
            </div>
            <div class="server-selector-container">
                <div class="selector-area">
                    <div class="selector-row">
                        <div class="row-label"><i class="fas fa-server"></i><span>Server:</span></div>
                        <div class="selector-buttons">${buttonsHTML}</div>
                    </div>
                </div>
                <div class="info-box">If current server doesn't work please try other servers.</div>
            </div>
        </main>
    `;
    
    // Add the component to the page
    document.body.insertAdjacentHTML('beforeend', fullComponentHTML);

    // Load Plyr JS and initialize the player
    await loadJS('https://cdn.plyr.io/3.7.8/plyr.js');
    const player = new Plyr('#player');

    // Set up the button functionality
    setupServerButtons(player);
}

____________________________________

File: ./js/components/Toolbar.js

// This function dynamically loads a CSS file into the <head>
function loadCSS(href) {
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = href;
    document.head.appendChild(link);
}

// This function creates the HTML for our top bar and adds it to the page.
function createToolbar() {
    // First, load the component's specific CSS
    loadCSS('css/components/toolbar.css');

    const toolbarHTML = `
        <header class="top-bar">
            <span>PIRATE</span>
        </header>
    `;

    // Add the HTML to the beginning of the <body>
    document.body.insertAdjacentHTML('afterbegin', toolbarHTML);
}

// We export the function so other files can import and use it.
export { createToolbar };

____________________________________

File: ./css/style.css

/* General body styling */
body {
    margin: 0;
    font-family: 'Roboto', sans-serif;
    background-color: #202124;
    color: #ffffff;
}

____________________________________

File: ./css/components/serverselector.css

/* css/components/serverselector.css */

.server-selector-container {
    font-family: 'Roboto', sans-serif;
    background-color: #2D2D3A;
    border-radius: 8px;
    padding: 20px;
    margin-top: 20px;
    width: 50%;
    box-sizing: border-box;
}

.info-box {
    background-color: #00b3ff;
    color: #ffffff;
    padding: 20px;
    border-radius: 8px;
    font-size: 16px;
    line-height: 1.5;
    text-align: center;
    margin-top: 20px;
}

.selector-area {
    display: flex;
    flex-direction: column;
}

.selector-row {
    display: flex;
    align-items: center;
    gap: 15px;
}

.selector-row .row-label {
    font-size: 18px;
    font-weight: 500;
    color: #e8eaed;
    display: flex;
    align-items: center;
    gap: 8px;
    min-width: 80px;
}

.selector-buttons {
    display: flex;
    gap: 10px;
}

.server-btn {
    background-color: #43445A;
    color: #e8eaed;
    border: none;
    border-radius: 6px;
    padding: 10px 20px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
}

.server-btn:hover {
    background-color: #5a5b70;
}

.server-btn.active {
    background-color: #00b3ff;
    color: #ffffff;
}

____________________________________

File: ./css/components/toolbar.css

/* Top Bar Styling */
.top-bar {
    display: flex;
    align-items: center;
    margin-left: 20px;
    padding: 24px;
    height: 64px;
    background-color: rgba(32, 33, 36, 0.7); /* Same color as the body but with 70% opacity */
    backdrop-filter: blur(10px); /* Creates a frosted glass effect */
    -webkit-backdrop-filter: blur(10px); /* For Safari compatibility */
    color: #e8eaed;
    font-size: 40px;
    font-weight: 900;
}

____________________________________

File: ./css/components/videoplayer.css

/* css/components/videoplayer.css */

/* Main content area that handles layout */
.content-area {
    display: flex;
    flex-direction: column; 
    align-items: center;    
    padding: 40px 20px;
}

/* A simple container for the player */
.video-container {
    width: 50%; 
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    border-radius: 8px;
    overflow: hidden;
    /* This makes sure the container has the same aspect ratio as the video inside */
    aspect-ratio: 16 / 9; 
    background-color: #000;
}

____________________________________

